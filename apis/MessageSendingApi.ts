/* tslint:disable */
/* eslint-disable */
/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InstancesInstanceKeySendAudioPostRequest,
  InstancesInstanceKeySendDocumentPostRequest,
  InstancesInstanceKeySendImagePostRequest,
  InstancesInstanceKeySendUploadPostRequest,
  InstancesInstanceKeySendVideoPostRequest,
  MainAPIResponse,
  StructsButtonMessagePayload,
  StructsButtonMessageWithMediaPayload,
  StructsContactMessagePayload,
  StructsListMessagePayload,
  StructsLocationMessagePayload,
  StructsPollMessagePayload,
  StructsSendMediaPayload,
  StructsTemplateButtonPayload,
  StructsTemplateButtonWithMediaPayload,
  StructsTextMessage,
} from '../models';
import {
    InstancesInstanceKeySendAudioPostRequestFromJSON,
    InstancesInstanceKeySendAudioPostRequestToJSON,
    InstancesInstanceKeySendDocumentPostRequestFromJSON,
    InstancesInstanceKeySendDocumentPostRequestToJSON,
    InstancesInstanceKeySendImagePostRequestFromJSON,
    InstancesInstanceKeySendImagePostRequestToJSON,
    InstancesInstanceKeySendUploadPostRequestFromJSON,
    InstancesInstanceKeySendUploadPostRequestToJSON,
    InstancesInstanceKeySendVideoPostRequestFromJSON,
    InstancesInstanceKeySendVideoPostRequestToJSON,
    MainAPIResponseFromJSON,
    MainAPIResponseToJSON,
    StructsButtonMessagePayloadFromJSON,
    StructsButtonMessagePayloadToJSON,
    StructsButtonMessageWithMediaPayloadFromJSON,
    StructsButtonMessageWithMediaPayloadToJSON,
    StructsContactMessagePayloadFromJSON,
    StructsContactMessagePayloadToJSON,
    StructsListMessagePayloadFromJSON,
    StructsListMessagePayloadToJSON,
    StructsLocationMessagePayloadFromJSON,
    StructsLocationMessagePayloadToJSON,
    StructsPollMessagePayloadFromJSON,
    StructsPollMessagePayloadToJSON,
    StructsSendMediaPayloadFromJSON,
    StructsSendMediaPayloadToJSON,
    StructsTemplateButtonPayloadFromJSON,
    StructsTemplateButtonPayloadToJSON,
    StructsTemplateButtonWithMediaPayloadFromJSON,
    StructsTemplateButtonWithMediaPayloadToJSON,
    StructsTextMessageFromJSON,
    StructsTextMessageToJSON,
} from '../models';

export interface InstancesInstanceKeyBusinessCatalogGetRequest {
    instanceKey: string;
}

export interface InstancesInstanceKeySendAudioPostOperationRequest {
    instanceKey: string;
    to: string;
    instancesInstanceKeySendAudioPostRequest: InstancesInstanceKeySendAudioPostRequest;
    caption?: string;
}

export interface InstancesInstanceKeySendButtonMediaPostRequest {
    instanceKey: string;
    data: StructsButtonMessageWithMediaPayload;
}

export interface InstancesInstanceKeySendButtonsPostRequest {
    instanceKey: string;
    data: StructsButtonMessagePayload;
}

export interface InstancesInstanceKeySendContactPostRequest {
    instanceKey: string;
    data: StructsContactMessagePayload;
}

export interface InstancesInstanceKeySendDocumentPostOperationRequest {
    instanceKey: string;
    to: string;
    instancesInstanceKeySendDocumentPostRequest: InstancesInstanceKeySendDocumentPostRequest;
    caption?: string;
}

export interface InstancesInstanceKeySendImagePostOperationRequest {
    instanceKey: string;
    to: string;
    instancesInstanceKeySendImagePostRequest: InstancesInstanceKeySendImagePostRequest;
    caption?: string;
}

export interface InstancesInstanceKeySendListPostRequest {
    instanceKey: string;
    data: StructsListMessagePayload;
}

export interface InstancesInstanceKeySendLocationPostRequest {
    instanceKey: string;
    data: StructsLocationMessagePayload;
}

export interface InstancesInstanceKeySendMediaPostRequest {
    instanceKey: string;
    data: StructsSendMediaPayload;
}

export interface InstancesInstanceKeySendPollPostRequest {
    instanceKey: string;
    data: StructsPollMessagePayload;
}

export interface InstancesInstanceKeySendTemplateMediaPostRequest {
    instanceKey: string;
    data: StructsTemplateButtonWithMediaPayload;
}

export interface InstancesInstanceKeySendTemplatePostRequest {
    instanceKey: string;
    data: StructsTemplateButtonPayload;
}

export interface InstancesInstanceKeySendTextPostRequest {
    instanceKey: string;
    data: StructsTextMessage;
}

export interface InstancesInstanceKeySendUploadPostOperationRequest {
    instanceKey: string;
    type: InstancesInstanceKeySendUploadPostTypeEnum;
    instancesInstanceKeySendUploadPostRequest: InstancesInstanceKeySendUploadPostRequest;
}

export interface InstancesInstanceKeySendVideoPostOperationRequest {
    instanceKey: string;
    to: string;
    instancesInstanceKeySendVideoPostRequest: InstancesInstanceKeySendVideoPostRequest;
    caption?: string;
}

/**
 * 
 */
export class MessageSendingApi extends runtime.BaseAPI {

    /**
     * Gets list of all products registered by you.
     * Fetches the catlog.
     */
    async instancesInstanceKeyBusinessCatalogGetRaw(requestParameters: InstancesInstanceKeyBusinessCatalogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyBusinessCatalogGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/business/catalog`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Gets list of all products registered by you.
     * Fetches the catlog.
     */
    async instancesInstanceKeyBusinessCatalogGet(requestParameters: InstancesInstanceKeyBusinessCatalogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeyBusinessCatalogGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw audio.
     */
    async instancesInstanceKeySendAudioPostRaw(requestParameters: InstancesInstanceKeySendAudioPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendAudioPost.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling instancesInstanceKeySendAudioPost.');
        }

        if (requestParameters.instancesInstanceKeySendAudioPostRequest === null || requestParameters.instancesInstanceKeySendAudioPostRequest === undefined) {
            throw new runtime.RequiredError('instancesInstanceKeySendAudioPostRequest','Required parameter requestParameters.instancesInstanceKeySendAudioPostRequest was null or undefined when calling instancesInstanceKeySendAudioPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.caption !== undefined) {
            queryParameters['caption'] = requestParameters.caption;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/audio`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstancesInstanceKeySendAudioPostRequestToJSON(requestParameters.instancesInstanceKeySendAudioPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw audio.
     */
    async instancesInstanceKeySendAudioPost(requestParameters: InstancesInstanceKeySendAudioPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendAudioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * Send a button message with a media header.
     */
    async instancesInstanceKeySendButtonMediaPostRaw(requestParameters: InstancesInstanceKeySendButtonMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendButtonMediaPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendButtonMediaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/button-media`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsButtonMessageWithMediaPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * Send a button message with a media header.
     */
    async instancesInstanceKeySendButtonMediaPost(requestParameters: InstancesInstanceKeySendButtonMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendButtonMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * Send a button message.
     */
    async instancesInstanceKeySendButtonsPostRaw(requestParameters: InstancesInstanceKeySendButtonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendButtonsPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendButtonsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/buttons`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsButtonMessagePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * Send a button message.
     */
    async instancesInstanceKeySendButtonsPost(requestParameters: InstancesInstanceKeySendButtonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendButtonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a contact (vcard) message to the given user.
     * Send a contact message.
     */
    async instancesInstanceKeySendContactPostRaw(requestParameters: InstancesInstanceKeySendContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendContactPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendContactPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/contact`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsContactMessagePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a contact (vcard) message to the given user.
     * Send a contact message.
     */
    async instancesInstanceKeySendContactPost(requestParameters: InstancesInstanceKeySendContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendContactPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw document.
     */
    async instancesInstanceKeySendDocumentPostRaw(requestParameters: InstancesInstanceKeySendDocumentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendDocumentPost.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling instancesInstanceKeySendDocumentPost.');
        }

        if (requestParameters.instancesInstanceKeySendDocumentPostRequest === null || requestParameters.instancesInstanceKeySendDocumentPostRequest === undefined) {
            throw new runtime.RequiredError('instancesInstanceKeySendDocumentPostRequest','Required parameter requestParameters.instancesInstanceKeySendDocumentPostRequest was null or undefined when calling instancesInstanceKeySendDocumentPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.caption !== undefined) {
            queryParameters['caption'] = requestParameters.caption;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/document`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstancesInstanceKeySendDocumentPostRequestToJSON(requestParameters.instancesInstanceKeySendDocumentPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw document.
     */
    async instancesInstanceKeySendDocumentPost(requestParameters: InstancesInstanceKeySendDocumentPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendDocumentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw image.
     */
    async instancesInstanceKeySendImagePostRaw(requestParameters: InstancesInstanceKeySendImagePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendImagePost.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling instancesInstanceKeySendImagePost.');
        }

        if (requestParameters.instancesInstanceKeySendImagePostRequest === null || requestParameters.instancesInstanceKeySendImagePostRequest === undefined) {
            throw new runtime.RequiredError('instancesInstanceKeySendImagePostRequest','Required parameter requestParameters.instancesInstanceKeySendImagePostRequest was null or undefined when calling instancesInstanceKeySendImagePost.');
        }

        const queryParameters: any = {};

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.caption !== undefined) {
            queryParameters['caption'] = requestParameters.caption;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/image`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstancesInstanceKeySendImagePostRequestToJSON(requestParameters.instancesInstanceKeySendImagePostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw image.
     */
    async instancesInstanceKeySendImagePost(requestParameters: InstancesInstanceKeySendImagePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an interactive List message to the given user.
     * Send a List message.
     */
    async instancesInstanceKeySendListPostRaw(requestParameters: InstancesInstanceKeySendListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendListPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendListPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/list`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsListMessagePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends an interactive List message to the given user.
     * Send a List message.
     */
    async instancesInstanceKeySendListPost(requestParameters: InstancesInstanceKeySendListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * Send a location message.
     */
    async instancesInstanceKeySendLocationPostRaw(requestParameters: InstancesInstanceKeySendLocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendLocationPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendLocationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/location`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsLocationMessagePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * Send a location message.
     */
    async instancesInstanceKeySendLocationPost(requestParameters: InstancesInstanceKeySendLocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendLocationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a media message to the given user.
     * Send a media message.
     */
    async instancesInstanceKeySendMediaPostRaw(requestParameters: InstancesInstanceKeySendMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendMediaPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendMediaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/media`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsSendMediaPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a media message to the given user.
     * Send a media message.
     */
    async instancesInstanceKeySendMediaPost(requestParameters: InstancesInstanceKeySendMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * Send a Poll message with media.
     */
    async instancesInstanceKeySendPollPostRaw(requestParameters: InstancesInstanceKeySendPollPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendPollPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendPollPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/poll`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsPollMessagePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * Send a Poll message with media.
     */
    async instancesInstanceKeySendPollPost(requestParameters: InstancesInstanceKeySendPollPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendPollPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
     * Send a template message with media.
     */
    async instancesInstanceKeySendTemplateMediaPostRaw(requestParameters: InstancesInstanceKeySendTemplateMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendTemplateMediaPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendTemplateMediaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/template-media`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsTemplateButtonWithMediaPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
     * Send a template message with media.
     */
    async instancesInstanceKeySendTemplateMediaPost(requestParameters: InstancesInstanceKeySendTemplateMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendTemplateMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
     * Send a template message.
     */
    async instancesInstanceKeySendTemplatePostRaw(requestParameters: InstancesInstanceKeySendTemplatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendTemplatePost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendTemplatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/template`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsTemplateButtonPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
     * Send a template message.
     */
    async instancesInstanceKeySendTemplatePost(requestParameters: InstancesInstanceKeySendTemplatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendTemplatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a text message to the given user.
     * Send a text message.
     */
    async instancesInstanceKeySendTextPostRaw(requestParameters: InstancesInstanceKeySendTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendTextPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeySendTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/text`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StructsTextMessageToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a text message to the given user.
     * Send a text message.
     */
    async instancesInstanceKeySendTextPost(requestParameters: InstancesInstanceKeySendTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * Upload media.
     */
    async instancesInstanceKeySendUploadPostRaw(requestParameters: InstancesInstanceKeySendUploadPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendUploadPost.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling instancesInstanceKeySendUploadPost.');
        }

        if (requestParameters.instancesInstanceKeySendUploadPostRequest === null || requestParameters.instancesInstanceKeySendUploadPostRequest === undefined) {
            throw new runtime.RequiredError('instancesInstanceKeySendUploadPostRequest','Required parameter requestParameters.instancesInstanceKeySendUploadPostRequest was null or undefined when calling instancesInstanceKeySendUploadPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/upload`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstancesInstanceKeySendUploadPostRequestToJSON(requestParameters.instancesInstanceKeySendUploadPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * Upload media.
     */
    async instancesInstanceKeySendUploadPost(requestParameters: InstancesInstanceKeySendUploadPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw video.
     */
    async instancesInstanceKeySendVideoPostRaw(requestParameters: InstancesInstanceKeySendVideoPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainAPIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeySendVideoPost.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling instancesInstanceKeySendVideoPost.');
        }

        if (requestParameters.instancesInstanceKeySendVideoPostRequest === null || requestParameters.instancesInstanceKeySendVideoPostRequest === undefined) {
            throw new runtime.RequiredError('instancesInstanceKeySendVideoPostRequest','Required parameter requestParameters.instancesInstanceKeySendVideoPostRequest was null or undefined when calling instancesInstanceKeySendVideoPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.caption !== undefined) {
            queryParameters['caption'] = requestParameters.caption;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/send/video`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstancesInstanceKeySendVideoPostRequestToJSON(requestParameters.instancesInstanceKeySendVideoPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainAPIResponseFromJSON(jsonValue));
    }

    /**
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * Send raw video.
     */
    async instancesInstanceKeySendVideoPost(requestParameters: InstancesInstanceKeySendVideoPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainAPIResponse> {
        const response = await this.instancesInstanceKeySendVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const InstancesInstanceKeySendUploadPostOperationTypeEnum = {
    Image: 'image',
    Video: 'video',
    Audio: 'audio',
    Document: 'document'
} as const;
export type InstancesInstanceKeySendUploadPostOperationTypeEnum = typeof InstancesInstanceKeySendUploadPostOperationTypeEnum[keyof typeof InstancesInstanceKeySendUploadPostOperationTypeEnum];
