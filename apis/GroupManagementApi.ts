/* tslint:disable */
/* eslint-disable */
/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIResponse,
  GroupCreatePayload,
  GroupUpdateDescriptionPayload,
  GroupUpdateNamePayload,
  GroupUpdateParticipantsPayload,
  SetGroupPictureRequest,
} from '../models';
import {
    APIResponseFromJSON,
    APIResponseToJSON,
    GroupCreatePayloadFromJSON,
    GroupCreatePayloadToJSON,
    GroupUpdateDescriptionPayloadFromJSON,
    GroupUpdateDescriptionPayloadToJSON,
    GroupUpdateNamePayloadFromJSON,
    GroupUpdateNamePayloadToJSON,
    GroupUpdateParticipantsPayloadFromJSON,
    GroupUpdateParticipantsPayloadToJSON,
    SetGroupPictureRequestFromJSON,
    SetGroupPictureRequestToJSON,
} from '../models';

export interface AddParticipantRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface CreateGroupRequest {
    instanceKey: string;
    data: GroupCreatePayload;
}

export interface DemoteParticipantRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface GetAdminGroupsRequest {
    instanceKey: string;
}

export interface GetAllGroupsRequest {
    instanceKey: string;
    includeParticipants?: GetAllGroupsIncludeParticipantsEnum;
}

export interface GetAllParticipantsRequest {
    instanceKey: string;
    groupId: string;
}

export interface GetGroupRequest {
    instanceKey: string;
    groupId: string;
}

export interface GetGroupFromInviteLinkRequest {
    instanceKey: string;
    inviteLink: string;
}

export interface GetGroupInviteCodeRequest {
    instanceKey: string;
    groupId: string;
}

export interface JoinGroupWithLinkRequest {
    instanceKey: string;
    inviteCode: string;
}

export interface LeaveGroupRequest {
    instanceKey: string;
    groupId: string;
}

export interface PromoteParticipantRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface RemoveParticipantRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface SetGroupAnnounceRequest {
    instanceKey: string;
    announce: SetGroupAnnounceAnnounceEnum;
    groupId: string;
}

export interface SetGroupDescriptionRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateDescriptionPayload;
}

export interface SetGroupLockedRequest {
    instanceKey: string;
    locked: SetGroupLockedLockedEnum;
    groupId: string;
}

export interface SetGroupNameRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateNamePayload;
}

export interface SetGroupPictureOperationRequest {
    instanceKey: string;
    groupId: string;
    setGroupPictureRequest: SetGroupPictureRequest;
}

/**
 * 
 */
export class GroupManagementApi extends runtime.BaseAPI {

    /**
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * Add participant.
     */
    async addParticipantRaw(requestParameters: AddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling addParticipant.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling addParticipant.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling addParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/add`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * Add participant.
     */
    async addParticipant(requestParameters: AddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.addParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a group with the participant data. The creator is automatically added to the group.
     * Create group.
     */
    async createGroupRaw(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling createGroup.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/create`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupCreatePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Creates a group with the participant data. The creator is automatically added to the group.
     * Create group.
     */
    async createGroup(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * Demote participant.
     */
    async demoteParticipantRaw(requestParameters: DemoteParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling demoteParticipant.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling demoteParticipant.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling demoteParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/demote`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * Demote participant.
     */
    async demoteParticipant(requestParameters: DemoteParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.demoteParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of all groups in which you are admin.
     * Get admin groups.
     */
    async getAdminGroupsRaw(requestParameters: GetAdminGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling getAdminGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/admin`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Returns list of all groups in which you are admin.
     * Get admin groups.
     */
    async getAdminGroups(requestParameters: GetAdminGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.getAdminGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * Get all groups.
     */
    async getAllGroupsRaw(requestParameters: GetAllGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling getAllGroups.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeParticipants !== undefined) {
            queryParameters['include_participants'] = requestParameters.includeParticipants;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * Get all groups.
     */
    async getAllGroups(requestParameters: GetAllGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.getAllGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all participants of the group.
     * Get all participants.
     */
    async getAllParticipantsRaw(requestParameters: GetAllParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling getAllParticipants.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getAllParticipants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Returns all participants of the group.
     * Get all participants.
     */
    async getAllParticipants(requestParameters: GetAllParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.getAllParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the group data.
     * Get group.
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling getGroup.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Fetches the group data.
     * Get group.
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * Get group from invite link.
     */
    async getGroupFromInviteLinkRaw(requestParameters: GetGroupFromInviteLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling getGroupFromInviteLink.');
        }

        if (requestParameters.inviteLink === null || requestParameters.inviteLink === undefined) {
            throw new runtime.RequiredError('inviteLink','Required parameter requestParameters.inviteLink was null or undefined when calling getGroupFromInviteLink.');
        }

        const queryParameters: any = {};

        if (requestParameters.inviteLink !== undefined) {
            queryParameters['invite_link'] = requestParameters.inviteLink;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/invite-info`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * Get group from invite link.
     */
    async getGroupFromInviteLink(requestParameters: GetGroupFromInviteLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.getGroupFromInviteLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the invite code of the group.
     * Get group invite code.
     */
    async getGroupInviteCodeRaw(requestParameters: GetGroupInviteCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling getGroupInviteCode.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroupInviteCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/invite-code`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Gets the invite code of the group.
     * Get group invite code.
     */
    async getGroupInviteCode(requestParameters: GetGroupInviteCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.getGroupInviteCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
     * Join group with invite code.
     */
    async joinGroupWithLinkRaw(requestParameters: JoinGroupWithLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling joinGroupWithLink.');
        }

        if (requestParameters.inviteCode === null || requestParameters.inviteCode === undefined) {
            throw new runtime.RequiredError('inviteCode','Required parameter requestParameters.inviteCode was null or undefined when calling joinGroupWithLink.');
        }

        const queryParameters: any = {};

        if (requestParameters.inviteCode !== undefined) {
            queryParameters['invite_code'] = requestParameters.inviteCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/join`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
     * Join group with invite code.
     */
    async joinGroupWithLink(requestParameters: JoinGroupWithLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.joinGroupWithLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Leaves the specified group.
     * Leaves the group.
     */
    async leaveGroupRaw(requestParameters: LeaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling leaveGroup.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling leaveGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Leaves the specified group.
     * Leaves the group.
     */
    async leaveGroup(requestParameters: LeaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.leaveGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * Promote participant.
     */
    async promoteParticipantRaw(requestParameters: PromoteParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling promoteParticipant.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling promoteParticipant.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling promoteParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/promote`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * Promote participant.
     */
    async promoteParticipant(requestParameters: PromoteParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.promoteParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * Remove participant.
     */
    async removeParticipantRaw(requestParameters: RemoveParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling removeParticipant.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling removeParticipant.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling removeParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/remove`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * Remove participant.
     */
    async removeParticipant(requestParameters: RemoveParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.removeParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set if non-admins are allowed to send messages in groups
     * Set group announce.
     */
    async setGroupAnnounceRaw(requestParameters: SetGroupAnnounceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling setGroupAnnounce.');
        }

        if (requestParameters.announce === null || requestParameters.announce === undefined) {
            throw new runtime.RequiredError('announce','Required parameter requestParameters.announce was null or undefined when calling setGroupAnnounce.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling setGroupAnnounce.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/announce`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"announce"}}`, encodeURIComponent(String(requestParameters.announce))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Set if non-admins are allowed to send messages in groups
     * Set group announce.
     */
    async setGroupAnnounce(requestParameters: SetGroupAnnounceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.setGroupAnnounceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the group description
     * Set group description.
     */
    async setGroupDescriptionRaw(requestParameters: SetGroupDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling setGroupDescription.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling setGroupDescription.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling setGroupDescription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/description`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateDescriptionPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Changes the group description
     * Set group description.
     */
    async setGroupDescription(requestParameters: SetGroupDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.setGroupDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set if non-admins are allowed to change the group dp and other stuff
     * Set group locked.
     */
    async setGroupLockedRaw(requestParameters: SetGroupLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling setGroupLocked.');
        }

        if (requestParameters.locked === null || requestParameters.locked === undefined) {
            throw new runtime.RequiredError('locked','Required parameter requestParameters.locked was null or undefined when calling setGroupLocked.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling setGroupLocked.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/lock`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"locked"}}`, encodeURIComponent(String(requestParameters.locked))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Set if non-admins are allowed to change the group dp and other stuff
     * Set group locked.
     */
    async setGroupLocked(requestParameters: SetGroupLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.setGroupLockedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the group name. The max limit is 22 chars
     * Set group name.
     */
    async setGroupNameRaw(requestParameters: SetGroupNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling setGroupName.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling setGroupName.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling setGroupName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/name`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateNamePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Changes the group name. The max limit is 22 chars
     * Set group name.
     */
    async setGroupName(requestParameters: SetGroupNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.setGroupNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * Set group picture.
     */
    async setGroupPictureRaw(requestParameters: SetGroupPictureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling setGroupPicture.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling setGroupPicture.');
        }

        if (requestParameters.setGroupPictureRequest === null || requestParameters.setGroupPictureRequest === undefined) {
            throw new runtime.RequiredError('setGroupPictureRequest','Required parameter requestParameters.setGroupPictureRequest was null or undefined when calling setGroupPicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/profile-pic`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetGroupPictureRequestToJSON(requestParameters.setGroupPictureRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * Set group picture.
     */
    async setGroupPicture(requestParameters: SetGroupPictureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.setGroupPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllGroupsIncludeParticipantsEnum = {
    False: 'false',
    True: 'true'
} as const;
export type GetAllGroupsIncludeParticipantsEnum = typeof GetAllGroupsIncludeParticipantsEnum[keyof typeof GetAllGroupsIncludeParticipantsEnum];
/**
 * @export
 */
export const SetGroupAnnounceAnnounceEnum = {
    True: true,
    False: false
} as const;
export type SetGroupAnnounceAnnounceEnum = typeof SetGroupAnnounceAnnounceEnum[keyof typeof SetGroupAnnounceAnnounceEnum];
/**
 * @export
 */
export const SetGroupLockedLockedEnum = {
    True: true,
    False: false
} as const;
export type SetGroupLockedLockedEnum = typeof SetGroupLockedLockedEnum[keyof typeof SetGroupLockedLockedEnum];
