/* tslint:disable */
/* eslint-disable */
/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIResponse,
  GroupCreatePayload,
  GroupUpdateDescriptionPayload,
  GroupUpdateNamePayload,
  GroupUpdateParticipantsPayload,
  InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest,
} from '../models';
import {
    APIResponseFromJSON,
    APIResponseToJSON,
    GroupCreatePayloadFromJSON,
    GroupCreatePayloadToJSON,
    GroupUpdateDescriptionPayloadFromJSON,
    GroupUpdateDescriptionPayloadToJSON,
    GroupUpdateNamePayloadFromJSON,
    GroupUpdateNamePayloadToJSON,
    GroupUpdateParticipantsPayloadFromJSON,
    GroupUpdateParticipantsPayloadToJSON,
    InstancesInstanceKeyGroupsGroupIdProfilePicPutRequestFromJSON,
    InstancesInstanceKeyGroupsGroupIdProfilePicPutRequestToJSON,
} from '../models';

export interface InstancesInstanceKeyGroupsAdminGetRequest {
    instanceKey: string;
}

export interface InstancesInstanceKeyGroupsCreatePostRequest {
    instanceKey: string;
    data: GroupCreatePayload;
}

export interface InstancesInstanceKeyGroupsGetRequest {
    instanceKey: string;
    includeParticipants?: InstancesInstanceKeyGroupsGetIncludeParticipantsEnum;
}

export interface InstancesInstanceKeyGroupsGroupIdAnnouncePutRequest {
    instanceKey: string;
    announce: InstancesInstanceKeyGroupsGroupIdAnnouncePutAnnounceEnum;
    groupId: string;
}

export interface InstancesInstanceKeyGroupsGroupIdDeleteRequest {
    instanceKey: string;
    groupId: string;
}

export interface InstancesInstanceKeyGroupsGroupIdDescriptionPutRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateDescriptionPayload;
}

export interface InstancesInstanceKeyGroupsGroupIdGetRequest {
    instanceKey: string;
    groupId: string;
}

export interface InstancesInstanceKeyGroupsGroupIdInviteCodeGetRequest {
    instanceKey: string;
    groupId: string;
}

export interface InstancesInstanceKeyGroupsGroupIdLockPutRequest {
    instanceKey: string;
    locked: InstancesInstanceKeyGroupsGroupIdLockPutLockedEnum;
    groupId: string;
}

export interface InstancesInstanceKeyGroupsGroupIdNamePutRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateNamePayload;
}

export interface InstancesInstanceKeyGroupsGroupIdParticipantsAddPostRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequest {
    instanceKey: string;
    groupId: string;
    data: GroupUpdateParticipantsPayload;
}

export interface InstancesInstanceKeyGroupsGroupIdProfilePicPutOperationRequest {
    instanceKey: string;
    groupId: string;
    instancesInstanceKeyGroupsGroupIdProfilePicPutRequest: InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest;
}

export interface InstancesInstanceKeyGroupsInviteInfoGetRequest {
    instanceKey: string;
    inviteLink: string;
}

/**
 * 
 */
export class GroupManagementApi extends runtime.BaseAPI {

    /**
     * Returns list of all groups in which you are admin.
     * Get admin groupss.
     */
    async instancesInstanceKeyGroupsAdminGetRaw(requestParameters: InstancesInstanceKeyGroupsAdminGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsAdminGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/admin`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Returns list of all groups in which you are admin.
     * Get admin groupss.
     */
    async instancesInstanceKeyGroupsAdminGet(requestParameters: InstancesInstanceKeyGroupsAdminGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsAdminGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a group with the participant data. The creator is automatically added to the group.
     * Create group.
     */
    async instancesInstanceKeyGroupsCreatePostRaw(requestParameters: InstancesInstanceKeyGroupsCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsCreatePost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsCreatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/create`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupCreatePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Creates a group with the participant data. The creator is automatically added to the group.
     * Create group.
     */
    async instancesInstanceKeyGroupsCreatePost(requestParameters: InstancesInstanceKeyGroupsCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * Get all groups.
     */
    async instancesInstanceKeyGroupsGetRaw(requestParameters: InstancesInstanceKeyGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeParticipants !== undefined) {
            queryParameters['include_participants'] = requestParameters.includeParticipants;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * Get all groups.
     */
    async instancesInstanceKeyGroupsGet(requestParameters: InstancesInstanceKeyGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set if non-admins are allowed to send messages in groups
     * Set group announce.
     */
    async instancesInstanceKeyGroupsGroupIdAnnouncePutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdAnnouncePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdAnnouncePut.');
        }

        if (requestParameters.announce === null || requestParameters.announce === undefined) {
            throw new runtime.RequiredError('announce','Required parameter requestParameters.announce was null or undefined when calling instancesInstanceKeyGroupsGroupIdAnnouncePut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdAnnouncePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/announce`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"announce"}}`, encodeURIComponent(String(requestParameters.announce))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Set if non-admins are allowed to send messages in groups
     * Set group announce.
     */
    async instancesInstanceKeyGroupsGroupIdAnnouncePut(requestParameters: InstancesInstanceKeyGroupsGroupIdAnnouncePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdAnnouncePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Leaves the specified group.
     * Leaves the group.
     */
    async instancesInstanceKeyGroupsGroupIdDeleteRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdDelete.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Leaves the specified group.
     * Leaves the group.
     */
    async instancesInstanceKeyGroupsGroupIdDelete(requestParameters: InstancesInstanceKeyGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the group description
     * Set group description.
     */
    async instancesInstanceKeyGroupsGroupIdDescriptionPutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdDescriptionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdDescriptionPut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdDescriptionPut.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsGroupIdDescriptionPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/description`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateDescriptionPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Changes the group description
     * Set group description.
     */
    async instancesInstanceKeyGroupsGroupIdDescriptionPut(requestParameters: InstancesInstanceKeyGroupsGroupIdDescriptionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdDescriptionPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the group data.
     * Get group.
     */
    async instancesInstanceKeyGroupsGroupIdGetRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdGet.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Fetches the group data.
     * Get group.
     */
    async instancesInstanceKeyGroupsGroupIdGet(requestParameters: InstancesInstanceKeyGroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the invite code of the group.
     * Get group invite code.
     */
    async instancesInstanceKeyGroupsGroupIdInviteCodeGetRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdInviteCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdInviteCodeGet.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdInviteCodeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/invite-code`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Gets the invite code of the group.
     * Get group invite code.
     */
    async instancesInstanceKeyGroupsGroupIdInviteCodeGet(requestParameters: InstancesInstanceKeyGroupsGroupIdInviteCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdInviteCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set if non-admins are allowed to change the group dp and other stuff
     * Set group locked.
     */
    async instancesInstanceKeyGroupsGroupIdLockPutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdLockPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdLockPut.');
        }

        if (requestParameters.locked === null || requestParameters.locked === undefined) {
            throw new runtime.RequiredError('locked','Required parameter requestParameters.locked was null or undefined when calling instancesInstanceKeyGroupsGroupIdLockPut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdLockPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/lock`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"locked"}}`, encodeURIComponent(String(requestParameters.locked))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Set if non-admins are allowed to change the group dp and other stuff
     * Set group locked.
     */
    async instancesInstanceKeyGroupsGroupIdLockPut(requestParameters: InstancesInstanceKeyGroupsGroupIdLockPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdLockPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the group name. The max limit is 22 chars
     * Set group name.
     */
    async instancesInstanceKeyGroupsGroupIdNamePutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdNamePut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdNamePut.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsGroupIdNamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/name`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateNamePayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Changes the group name. The max limit is 22 chars
     * Set group name.
     */
    async instancesInstanceKeyGroupsGroupIdNamePut(requestParameters: InstancesInstanceKeyGroupsGroupIdNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdNamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * Add participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsAddPostRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/add`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * Add participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsAddPost(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdParticipantsAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * Demote participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/demote`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * Demote participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * Promote participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/promote`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * Promote participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * Remove participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/participants/remove`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUpdateParticipantsPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * Remove participant.
     */
    async instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(requestParameters: InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * Set group picture.
     */
    async instancesInstanceKeyGroupsGroupIdProfilePicPutRaw(requestParameters: InstancesInstanceKeyGroupsGroupIdProfilePicPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsGroupIdProfilePicPut.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling instancesInstanceKeyGroupsGroupIdProfilePicPut.');
        }

        if (requestParameters.instancesInstanceKeyGroupsGroupIdProfilePicPutRequest === null || requestParameters.instancesInstanceKeyGroupsGroupIdProfilePicPutRequest === undefined) {
            throw new runtime.RequiredError('instancesInstanceKeyGroupsGroupIdProfilePicPutRequest','Required parameter requestParameters.instancesInstanceKeyGroupsGroupIdProfilePicPutRequest was null or undefined when calling instancesInstanceKeyGroupsGroupIdProfilePicPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/{group_id}/profile-pic`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InstancesInstanceKeyGroupsGroupIdProfilePicPutRequestToJSON(requestParameters.instancesInstanceKeyGroupsGroupIdProfilePicPutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * Set group picture.
     */
    async instancesInstanceKeyGroupsGroupIdProfilePicPut(requestParameters: InstancesInstanceKeyGroupsGroupIdProfilePicPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsGroupIdProfilePicPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * Get group from invite link.
     */
    async instancesInstanceKeyGroupsInviteInfoGetRaw(requestParameters: InstancesInstanceKeyGroupsInviteInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyGroupsInviteInfoGet.');
        }

        if (requestParameters.inviteLink === null || requestParameters.inviteLink === undefined) {
            throw new runtime.RequiredError('inviteLink','Required parameter requestParameters.inviteLink was null or undefined when calling instancesInstanceKeyGroupsInviteInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.inviteLink !== undefined) {
            queryParameters['invite_link'] = requestParameters.inviteLink;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/groups/invite-info`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * Get group from invite link.
     */
    async instancesInstanceKeyGroupsInviteInfoGet(requestParameters: InstancesInstanceKeyGroupsInviteInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyGroupsInviteInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const InstancesInstanceKeyGroupsGetIncludeParticipantsEnum = {
    False: 'false',
    True: 'true'
} as const;
export type InstancesInstanceKeyGroupsGetIncludeParticipantsEnum = typeof InstancesInstanceKeyGroupsGetIncludeParticipantsEnum[keyof typeof InstancesInstanceKeyGroupsGetIncludeParticipantsEnum];
/**
 * @export
 */
export const InstancesInstanceKeyGroupsGroupIdAnnouncePutAnnounceEnum = {
    True: true,
    False: false
} as const;
export type InstancesInstanceKeyGroupsGroupIdAnnouncePutAnnounceEnum = typeof InstancesInstanceKeyGroupsGroupIdAnnouncePutAnnounceEnum[keyof typeof InstancesInstanceKeyGroupsGroupIdAnnouncePutAnnounceEnum];
/**
 * @export
 */
export const InstancesInstanceKeyGroupsGroupIdLockPutLockedEnum = {
    True: true,
    False: false
} as const;
export type InstancesInstanceKeyGroupsGroupIdLockPutLockedEnum = typeof InstancesInstanceKeyGroupsGroupIdLockPutLockedEnum[keyof typeof InstancesInstanceKeyGroupsGroupIdLockPutLockedEnum];
