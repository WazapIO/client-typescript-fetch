/* tslint:disable */
/* eslint-disable */
/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIResponse,
  UserInfoPayload,
} from '../models';
import {
    APIResponseFromJSON,
    APIResponseToJSON,
    UserInfoPayloadFromJSON,
    UserInfoPayloadToJSON,
} from '../models';

export interface InstancesInstanceKeyMiscProfilePicGetRequest {
    instanceKey: string;
    jid: string;
}

export interface InstancesInstanceKeyMiscUserInfoPostRequest {
    instanceKey: string;
    data: UserInfoPayload;
}

/**
 * 
 */
export class MiscellaneousApi extends runtime.BaseAPI {

    /**
     * Returns the profile pic of the given user.
     * Get profile pic.
     */
    async instancesInstanceKeyMiscProfilePicGetRaw(requestParameters: InstancesInstanceKeyMiscProfilePicGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyMiscProfilePicGet.');
        }

        if (requestParameters.jid === null || requestParameters.jid === undefined) {
            throw new runtime.RequiredError('jid','Required parameter requestParameters.jid was null or undefined when calling instancesInstanceKeyMiscProfilePicGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.jid !== undefined) {
            queryParameters['jid'] = requestParameters.jid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/misc/profile-pic`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Returns the profile pic of the given user.
     * Get profile pic.
     */
    async instancesInstanceKeyMiscProfilePicGet(requestParameters: InstancesInstanceKeyMiscProfilePicGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyMiscProfilePicGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the user info for the given user ids. This does not checks if user is registered or not
     * Fetches the users info.
     */
    async instancesInstanceKeyMiscUserInfoPostRaw(requestParameters: InstancesInstanceKeyMiscUserInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIResponse>> {
        if (requestParameters.instanceKey === null || requestParameters.instanceKey === undefined) {
            throw new runtime.RequiredError('instanceKey','Required parameter requestParameters.instanceKey was null or undefined when calling instancesInstanceKeyMiscUserInfoPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling instancesInstanceKeyMiscUserInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/instances/{instance_key}/misc/user-info`.replace(`{${"instance_key"}}`, encodeURIComponent(String(requestParameters.instanceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoPayloadToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIResponseFromJSON(jsonValue));
    }

    /**
     * Gets the user info for the given user ids. This does not checks if user is registered or not
     * Fetches the users info.
     */
    async instancesInstanceKeyMiscUserInfoPost(requestParameters: InstancesInstanceKeyMiscUserInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIResponse> {
        const response = await this.instancesInstanceKeyMiscUserInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
