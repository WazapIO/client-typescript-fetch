/* tslint:disable */
/* eslint-disable */
/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StructsFileUpload } from './StructsFileUpload';
import {
    StructsFileUploadFromJSON,
    StructsFileUploadFromJSONTyped,
    StructsFileUploadToJSON,
} from './StructsFileUpload';

/**
 * 
 * @export
 * @interface StructsSendMediaPayload
 */
export interface StructsSendMediaPayload {
    /**
     * 
     * @type {string}
     * @memberof StructsSendMediaPayload
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof StructsSendMediaPayload
     */
    filename?: string;
    /**
     * 
     * @type {StructsFileUpload}
     * @memberof StructsSendMediaPayload
     */
    mediaData: StructsFileUpload;
    /**
     * 
     * @type {string}
     * @memberof StructsSendMediaPayload
     */
    mediaType: string;
    /**
     * 
     * @type {string}
     * @memberof StructsSendMediaPayload
     */
    to: string;
}

/**
 * Check if a given object implements the StructsSendMediaPayload interface.
 */
export function instanceOfStructsSendMediaPayload(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mediaData" in value;
    isInstance = isInstance && "mediaType" in value;
    isInstance = isInstance && "to" in value;

    return isInstance;
}

export function StructsSendMediaPayloadFromJSON(json: any): StructsSendMediaPayload {
    return StructsSendMediaPayloadFromJSONTyped(json, false);
}

export function StructsSendMediaPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): StructsSendMediaPayload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'caption': !exists(json, 'caption') ? undefined : json['caption'],
        'filename': !exists(json, 'filename') ? undefined : json['filename'],
        'mediaData': StructsFileUploadFromJSON(json['media_data']),
        'mediaType': json['media_type'],
        'to': json['to'],
    };
}

export function StructsSendMediaPayloadToJSON(value?: StructsSendMediaPayload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'caption': value.caption,
        'filename': value.filename,
        'media_data': StructsFileUploadToJSON(value.mediaData),
        'media_type': value.mediaType,
        'to': value.to,
    };
}

